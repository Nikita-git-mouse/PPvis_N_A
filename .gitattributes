#pragma once
#ifndef LIBRARY_H
#define LIBRARY_H

#include <iostream>
#include <vector>
#include <initializer_list>

class MySet {
public:
    MySet();
    ~MySet();


    // getter and setter
    void setter(std::string&);  // lvalue(постоянная переменная) строка со множеством 
    void setter(std::string&& line) { this->setter(line); } //   rvalue(вмеренная) ----> lvalue строка со множеством 
    void setter(char* line) { this->setter(std::string(line)); } // строка со множеством 
    void setter(MySet& value) { this->add(value); } // Наш класс и выделяем оттуда множество

    std::string getter(); // выдает строку предпалагаемого множества 


    // compare
    bool compare(MySet& value) { // проверяет равность множеств true если они равны
        return check(this->masElement, value.masElement) && check(value.masElement, this->masElement);
    }

    // add
    bool add(MySet&); // добавляет элемент ввиде нашего класса
    bool add(std::string&); // lvalue добавляет в наше множество строку со множеством
    bool add(std::string&& line) { this->add(line); } // rvalue ---> lvalue  
    bool add(char* line) { return this->add(std::string(line)); }

    bool operator += (std::string& line) { return this->add(line); } // тоже самое что и add()
    bool operator += (std::string&& line) { return this->add(line); }
    bool operator +=(char* line) { return this->add(std::string(line)); }

    bool operator += (MySet& value) { return this->add(value); }


    // merge
    MySet operator + (MySet&); // мержит два множества
    friend MySet mergeSet(MySet&, MySet&); 


    // cross
    MySet operator * (MySet&); // пересечение двух множеств
    friend MySet crossSet(MySet&, MySet&);
    void operator *= (MySet& value) { *this = *this * value; } // перегрузка операторов

    // difference
    MySet operator - (MySet&); // вычитание множеств
    friend MySet differenceSet(MySet&, MySet&);
    void operator -= (MySet& value) { *this = *this - value; }
    void differenceElement(MySet& value) { *this -= value; }

    void operator -= (std::string&);
    void differenceElement(std::string&);
    void differenceElement(std::string&& line) { this->differenceElement(line); }
    void differenceElement(char* line) { this->differenceElement(std::string(line)); }
    void operator -= (std::string&& line) { this->differenceElement(line); }
    void operator -= (char* line) { *this -= std::string(line); }

    // belong
    // принадлежность элемента
    bool operator[](MySet& value) { return this->check(value.masElement, this->masElement); } 
    bool belongElement(MySet& value) { return this->check(value.masElement, this->masElement); }
    bool belongElement(std::string&);
    bool belongElement(std::string&& line) { return this->belongElement(line); }
    bool belongElement(char* line) { return belongElement(std::string(line)); }



    // boolean
    // булеан множества
    MySet boolean();

    // other operations
    int capacity() { return this->masElement.size(); } // размер множества
    bool isEmpty() { return !this->masElement.size(); } // проверка на пустое множества
    void clearSet() { this->masElement.clear(); } // очистка множества

protected:

    struct sets { // элемент 
        bool flag; // проверка на элемент или множества
        std::vector<sets> elements;
        std::string element = "";
    };

private:

    // data
    std::vector<sets> masElement;

    // getter and setter
    int setter(std::vector<sets>&, std::string&, int);
    void getter(std::vector<sets>&, std::string&);

    // check
    bool check(sets&, sets&);
    bool check(std::vector<sets>&, std::vector<sets>&);
    bool check(std::vector<sets>&, sets&);

};


// functions, that work with MySet
MySet mergeSet(MySet&, MySet&);
MySet crossSet(MySet&, MySet&);
MySet differenceSet(MySet&, MySet&);


#endif // LIBRARY_H
